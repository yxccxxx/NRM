// Assembly code for float_add program
// r0, r1 stores float X retrieved from memory
// r2, r3 stores float Y retrieved from memory

// R0 r1 ==> X
// R2 r3 ==> Y
// R4 r5 ==> X exp bits
// R6 r7 ==> Y exp bits
// R8 r9 ==> X mantissa
// R10 r11 ==> Y mantissa
// R12 r13 ==> result
// R14 r15 ==> accumulator

assign 8
lw $r0

assign 10
lw $r2

mov 0, $r0 // move X's value into r14, r15
sr 1, 10 // put X's exp bits to the rightmost
mov 1, $r4 // store X's exp

mov 0, $r2 // move Y's value into r14, r15
sr 1, 10 // put Y's exp bits to the leftmost
mov 1, $r6 // store Y's exp

mov 0, $r0 // move X to r14, r15
sl 1, 6 // shift left 6 bits to get mantissa
sr 1, 1 // shift right to put mantissa as 0.xxxxxxxxxx
mov 1, $r8 // store X's mantissa

mov 0, $r2 // move Y to r14, r15
sl 1, 6 // shift left 6 bits to get mantissa
sr 1, 1 // shift right to put mantissa as 0.xxxxxxxxxx
mov 1, $r10 // store Y's mantissa

assign 1 // put 1 to r14, r15
sl 1, 15 // put 1 to the leftmost
or 0, $r8
mov 1, $r8 // store X's mantissa as 1.xxxxxxxxxx

assign 1 // put 1 to r14, r15
sl 1, 15 // put 1 to the leftmost
or 0, $r10
mov 1, $r10 // store Y's mantissa as 1.xxxxxxxxxx

mov 0, $r6 // move Y's exp into r14, r15
bge 0, $r4 // if X's exp >= Y's exp
jmp x_greater_equal

// X's exp < Y's exp
mov 0, $r6 // load Y's exp bits into r14, r15
sub 0, $r4 // delta = Y's exp - X's exp
mov 1, $r12 // store the delta in r12, r13
mov 0, $r8 // put X's mantissa to r14, r15
sr 0, $r12 // shift X's mantissa right for delta bits
mov 1, $r8 // store X's mantissa back
mov 0, $r6 // take Y's exp bits
jmp final_step

// X's exp <= Y's exp
x_greater_equal:
mov 0, $r4 // move X's exp to r14, r15
beq 0, $r6 // compare X's exp with Y's exp
jmp x_equal_y

// X's exp > Y's exp
mov 0, $r4 // load X's exp bits into r14, r15
sub 0, $r6 // delta = X's exp - Y's exp
mov 1, $r12 // store the delta in r12, r13
mov 0, $r10 // put Y's mantissa to r14, r15
sr 0, $r12 // shift Y's mantissa right for delta bits
mov 1, $r10 // store Y's mantissa back
mov 0, $r4 // take X's exp bits
jmp final_step

// X's exp == Y's exp
x_equal_y:
mov 0, $r4 // take X's exp bits

final_step:
sl 1, 10 // put exp bits to the right position
mov 1, $r12 // store exp bits to the result

mov 0, $r0 // move X to r14, r15
sl 1, 6 // shift left 6 bits to get mantissa
sr 1, 1 // shift right to put mantissa as 0.xxxxxxxxxx
mov 1, $r8 // store X's mantissa

mov 0, $r2 // move Y to r14, r15
sl 1, 6 // shift left 6 bits to get mantissa
sr 1, 1 // shift right to put mantissa as 0.xxxxxxxxxx
mov 1, $r10 // store Y's mantissa

mov 0, $r8 // put X's mantissa into r14, r15
or 0, $r12 // add X's mantissa to r12, r13
add 0, $r10 // add Y's mantissa
mov 1, $r12 // store the result to r12, r13

// store the result back to memory
assign 12
sw $r12
